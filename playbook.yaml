---
- hosts: all
  become: true
  vars_files:
  - variables
  tasks:
  - name: Install the dependencies
    yum:
      name: "{{ item }}"
      state: present
    loop:
      "{{ dependencies }}"

  - name: Enable Firewall
    service:
      name: firewalld
      state: started
      enabled: yes

  - name: Add firewall rules on the master node
    firewalld:
      zone: public
      port: "{{ item.port }}"
      permanent: yes
      immediate: yes
      state: enabled
    loop:
      "{{ master_port_list }}"
    when: inventory_hostname in groups['master']

  - name: Add firewall rules on the worker nodes
    firewalld:
      zone: public
      port: "{{ item.port }}"
      permanent: yes
      immediate: yes
      state: enabled
    loop:
      "{{ worker_port_list }}"
    when: inventory_hostname in groups['workers']

  - name: Build hosts file
    lineinfile:
      dest: /etc/hosts
      regexp: '.*{{ item }}$'
      line: '{{ hostvars[item].ansible_host }} {{item}}'
      state: present
    with_items: '{{ groups["all"] }}'

  - name: Load two required modules
    shell: |
      modprobe overlay
      modprobe br_netfilter

  - name: Add configuration to make them loadable at boot time
    blockinfile:
      path: /etc/modules-load.d/containerd.conf
      create: true
      block: |
        overlay
        br_netfilter

  - name: Set up other prerequisites
    sysctl:
      name: "{{ item }}"
      value: '1'
      sysctl_set: yes
      state: present
      reload: yes
      sysctl_file: /etc/sysctl.d/99-kubernetes-cri.conf
    loop:
      "{{ sysctl_set }}"

  - name: Add official Docker Repository to CentOS 7
    get_url:
      url: https://download.docker.com/linux/centos/docker-ce.repo
      dest: /etc/yum.repos.d/docker-ce.repo
      mode: 0644

  - name: Install the containerd package
    yum:
      name: containerd
      state: present

  - name: Create a configuration file for containerd and set it to default
    shell: |
      mkdir -p /etc/containerd
      containerd config default | tee /etc/containerd/config.toml

  - name: Set cgroupdriver to systemd
    lineinfile:
      path: /etc/containerd/config.toml
      regexp: 'SystemdCgroup = false'
      line: SystemdCgroup = true

  - name: To apply the changes made in the last step, restart containerd
    service:
      name: containerd
      state: restarted
      enabled: true

  - name: Add the Kubernetes repository
    blockinfile:
      path: /etc/yum.repos.d/kubernetes.repo
      create: true
      block: |
        [kubernetes]
        name=Kubernetes
        baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
        enabled=1
        gpgcheck=1
        repo_gpgcheck=1
        gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg

  - name: Install all Kubernetes modules (kubelet, kubeadm, kubectl)
    yum:
      name: "{{ packages }}"
      state: present
    vars:
      packages:
      - kubelet
      - kubeadm
      - kubectl

  - name: Turn off swap
    command: swapoff -a

  - name: Enable kubelet
    service:
      name: kubelet
      enabled: yes

  - name: Initializing Kubernetes cluster
    when: inventory_hostname in groups['master']
    command: kubeadm init --apiserver-advertise-address=172.31.0.100 --control-plane-endpoint=172.31.0.100 --pod-network-cidr=10.244.0.0/16

  - name: Set up Kubernetes for not root user
    become: false
    when: inventory_hostname in groups['master']
    shell: |
      mkdir -p $HOME/.kube
      sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
      sudo chown $(id -u):$(id -g) $HOME/.kube/config

  - name: Install Weave Network Add-on
    become: false
    when: inventory_hostname in groups['master']
    command: kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml

  - name: Retrieve Kubernetes join command that is used to join worker node(s)
    become: false
    when: inventory_hostname in groups['master']
    command: kubeadm token create --print-join-command
    register: join_command_raw

  - name: Set join command
    set_fact:
      join_command: "{{ join_command_raw.stdout_lines[0] }}"
    when: inventory_hostname in groups['master']

  - name: Print the join_command
    debug:
      msg: "{{ join_command }}"
    when: inventory_hostname in groups['master']
    
  - name: Join node to the cluster
    shell: "{{ hostvars['master-node'].join_command }}"
    when: inventory_hostname in groups['workers']